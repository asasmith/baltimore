{
  "name": "pagemaki",
  "version": "0.1.0",
  "description": "Simple static page generator with a bias towards Sass, Browserify, gulp, and lodash templates.",
  "main": "pagemaki.js",
  "scripts": {
    "test": "mocha --reporter list"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jasonrhodes/node-pagemaki.git"
  },
  "keywords": [
    "static",
    "generator",
    "html",
    "sass",
    "browserify",
    "markdown"
  ],
  "author": {
    "name": "Jason Rhodes"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jasonrhodes/node-pagemaki/issues"
  },
  "homepage": "https://github.com/jasonrhodes/node-pagemaki",
  "devDependencies": {
    "chai": "^1.9.1",
    "mocha": "^1.18.2"
  },
  "dependencies": {
    "js-yaml": "^3.0.2",
    "lodash": "^2.4.1",
    "through": "^2.3.4",
    "gulp": "^3.5.6",
    "marked": "^0.3.2",
    "highlight.js": "^8.0.0"
  },
  "readme": "![Sushi image by Benjamin Ang and Threadless](http://25.media.tumblr.com/tumblr_lrxx1h20581qzv89bo1_500.jpg)  \n_Illustration credit: Benjamin Ang/Threadless_\n\npagemaki\n=============\n\nPagemaki is a very basic static page generation library, meant to convert a combination of static content files with meta data (very much like basic Jekyll) and templated layout files into static HTML files that work for GitHub Pages hosting and other static HTML web servers.\n\n_Note: If you use gulp, be sure to checkout the [gulp-pagemaki plugin](https://github.com/jasonrhodes/gulp-pagemaki)_\n\n[Jump right to the method API &raquo;](API.md)\n\n## More of this shit? Why?\n\nI built pagemaki because I needed to get quick little sites up on GitHub Pages but I still wanted to use CommonJS and Browserify, Sass for CSS, and let gulp do my builds so that I don't have to repeat template boilerplate.\n\nThis library doesn't do much out of the box--you have to set it up to do what you want.\n\n## Quick Start\n\nAssume you have a file structure something like this:\n\n```\ngulpfile.js\npackage.json\npublic/\nsrc/\n  sass/\n  js/\n  pages/\n    index.html\n    dir/\n      subpage.html\n```\n\nYou can easily write a gulp task to stream your sass and js to be compiled and dropped into some 'assets' folder in your public folder, but if you want to manage those pages easily, tough.\n\nWith pagemaki, you can tell your build system to take everything in the src/pages directory and copy it over to your public folder, too, keeping the folder structure intact. You can also use layout templates and jekyll-like YAML variables in your page files, like so:\n\n```\n# src/pages/index.html\n\n---\ntitle: Homepage\nlayout: default\n---\n# My Homepage\n```\n\nCreate a new pagemaki and parse this file (currently, by default content is unparsed but you can pass in a content parser function to convert Markdown, for instance, as seen below):\n\n```javascript\nvar maker = new Pagemaki({\n  contentParse: function (string) {\n    return myFavoriteMarkdownParser.parse(string);\n  }\n});\n\nmaker.parse(fs.readFileSync(\"src/pages/index.html\"), function (err, parsed) {\n  console.log(parsed);\n});\n```\n\nWould print the following:\n\n```javascript\n{\n  options: {\n    title: \"Homepage\",\n    layout: \"default\"\n  },\n  content: \"<h1>My Homepage</h1>\"\n}\n```\n\nWhereas you can also tell pagemaki to \"make\" a page, too, which parses and then attempts to drop the content into the layout described in the options. So if you had a `layouts/default.html` file like this:\n\n```underscore\n<html>\n  <head>\n    <title><%= page.title || \"Untitled\" %></title>\n  </head>\n  <body>\n    <%= content %>\n  </body>\n</html>\n```\n\nThen when you ran the make function:\n\n```javascript\nvar maker = new Pagemaki({\n  contentParse: function (string) {\n    return myFavoriteMarkdownParser.parse(string);\n  }\n});\n\nmaker.make(fs.readFileSync(\"src/pages/index.html\"), function (err, made) {\n  console.log(made);\n});\n```\n\nResults:\n\n```html\n<html>\n  <head>\n    <title>Homepage</title>\n  </head>\n  <body>\n    <h1>My Homepage</h1>\n  </body>\n</html>\n```\n\n## API\n\n[Visit the method API &raquo;](API.md)\n",
  "readmeFilename": "README.md",
  "_id": "pagemaki@0.1.0",
  "dist": {
    "shasum": "72effc96200ecbe50dbe472371462852f03b2580"
  },
  "_from": "pagemaki@0.1.0",
  "_resolved": "https://registry.npmjs.org/pagemaki/-/pagemaki-0.1.0.tgz"
}
